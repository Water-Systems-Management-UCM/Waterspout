---
- hosts: webservers
  remote_user: nsantos5
  tasks:
    - name: Loading variables
      include_vars: ansible-waterspout-variables.yml

    - name: Loading secrets
      include_vars: secrets.yml

# This is for UCM deployments only - it locks down SSH to only campus IP addresses
# and sets up some pieces for backups, such as creating a backups user in postgres and
# allowing access to the DB for that backups user from campus IPs in the firewall and also
# from postgres HBA. It's then on the user to actually set up something that utilizes these
# rules to connect to the DB with pg_dump (or another tool) and store the backups somewhere
# versioned, etc. Make sure that secrets.yml includes postgres_backups_username and
# postgres_backups password, and that you have that saved wherever you want to actually
# run the backups from.

    - name: Disable firewall so we can change SSH rules
      become: true
      become_method: sudo
      ufw:
        state: disabled

    - name: Delete existing SSH rules - allow
      become: true
      become_method: sudo
      ufw:
        delete: yes
        port: ssh
        rule: allow
        proto: tcp

    - name: Delete existing SSH rules - limit
      become: true
      become_method: sudo
      ufw:
        delete: yes
        port: ssh
        rule: limit
        proto: tcp

    - name: Allow SSH from local subnet IPs (sometimes will appear this way from VPN)
      become: true
      become_method: sudo
      ufw:
        rule: limit
        port: ssh
        src: '{{ item }}'
        proto: tcp
      loop:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16

    - name: Allow SSH from campus
      become: true
      become_method: sudo
      ufw:
        rule: limit
        port: ssh
        src: 169.236.0.0/16
        proto: tcp

    - name: Allow Postgres from campus (so that we can know it's allowed from the Hyper-V host)
      become: true
      become_method: sudo
      ufw:
        rule: allow
        port: 5432
        src: 169.236.0.0/16
        proto: tcp

    - name: Allow Postgres from VPN
      become: true
      become_method: sudo
      ufw:
        rule: allow
        port: 5432
        src: 172.16.0.0/12
        proto: tcp


    - name: Enable firewall again
      become: true
      become_method: sudo
      ufw:
        state: enabled

    # create a postgres backups user with name and pw stored in secret data for the ansible deployment
    - name: Ensure user has access to the database
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_user:
        db: "{{ waterspout_db_name }}"
        name: "{{ postgres_backups_username }}"
        password: "{{ postgres_backups_password }}"
        priv: "CONNECT"  # make this user able to read, but not see anything else
        state: present

    - name: Grant SELECT to backups user on waterspout db defaults
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_privs:
        db: "{{ waterspout_db_name }}"
        privs: SELECT
        objs: TABLES,SEQUENCES
        type: default_privs
        role: "{{ postgres_backups_username }}"
        grant_option: no

    - name: Grant SELECT to backups user on waterspout schema itself
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_privs:
        db: "{{ waterspout_db_name }}"
        obj: "{{ waterspout_db_schema }}"
        type: schema
        privs: USAGE
        role: "{{ postgres_backups_username }}"
        grant_option: no

    - name: Grant SELECT to backups user on waterspout schema defaults
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_privs:
        db: "{{ waterspout_db_name }}"
        schema: "{{ waterspout_db_schema }}"
        privs: SELECT
        objs: TABLES,SEQUENCES
        type: default_privs
        role: "{{ postgres_backups_username }}"
        grant_option: no

    - name: Grant SELECT to backups user on waterspout schema tables
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_privs:
        db: "{{ waterspout_db_name }}"
        privs: SELECT
        objs: ALL_IN_SCHEMA
        type: table
        schema: "{{ waterspout_db_schema }}"
        role: "{{ postgres_backups_username }}"
        grant_option: no

    - name: Grant SELECT to backups user on waterspout schema sequences
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_privs:
        db: "{{ waterspout_db_name }}"
        privs: SELECT
        objs: ALL_IN_SCHEMA
        type: sequence
        schema: "{{ waterspout_db_schema }}"
        role: "{{ postgres_backups_username }}"
        grant_option: no

    # only valid/safe way to do this is to ask the DB server
    - name: Get the location of the pg_hba file
      become: true
      become_method: sudo
      become_user: postgres
      postgresql_query:
        db: "{{ waterspout_db_name }}"
        query: "SHOW hba_file;"
      register: pg_hba_file

    - name: PG HBA Location
      debug:
        msg: "pg_hba file at {{ pg_hba_file.query_result[0].hba_file }}"

    # configure pg_hba to allow connections for that user from campus
    - name: Grant pg_backups user access from campus
      become: true
      become_method: sudo
      postgresql_pg_hba:
        dest: "{{ pg_hba_file.query_result[0].hba_file }}"
        contype: host
        users: "{{ postgres_backups_username }}"
        source: 169.236.0.0/16
        databases: "all"  # all databases so it can technically connect to postgres during connection
        method: md5

    - name: Grant pg_backups user access from VPN
      become: true
      become_method: sudo
      postgresql_pg_hba:
        dest: "{{ pg_hba_file.query_result[0].hba_file }}"
        contype: host
        users: "{{ postgres_backups_username }}"
        source: 172.16.0.0/12
        databases: "all"  # all databases so it can technically connect to postgres during connection
        method: md5

    - name: Set listen_addresses for postgres to allow any IP since we're handling the rest with firewall/HBA
      become: true
      become_method: sudo
      become_user: postgres
      community.general.postgresql_set:
        name: listen_addresses
        value: "*"

    #- name: Restart Postgres to make it load new config
    #  become: true
    #  become_method: sudo
    #  service:
    #    name: postgresql
    #    state: restarted
