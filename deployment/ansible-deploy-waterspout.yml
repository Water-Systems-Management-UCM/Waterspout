---
- hosts: webservers
  remote_user: nsantos5
  tasks:
    - name: Loading variables
      include_vars: ansible-waterspout-variables.yml

    - name: Configure firewall to deny incoming traffic by default
      become: true
      become_method: sudo
      ufw:
        direction: incoming
        default: deny
    - name: Allow and limit SSH
      become: true
      become_method: sudo
      ufw:
        rule: limit
        port: ssh
        proto: tcp
    - name: Allow Port 80
      become: true
      become_method: sudo
      ufw:
        rule: allow
        port: '80'
        proto: tcp
    - name: Allow Port 443 (SSL/TLS)
      become: true
      become_method: sudo
      ufw:
        rule: allow
        port: '443'
        proto: tcp
    - name: Enable firewall
      become: true
      become_method: sudo
      ufw:
        state: enabled

    - name: Create Waterspout Group
      become: true
      become_method: sudo
      group:
        name: "{{ group_name }}"
        state: present

    - name: Create Waterspout user account
      become: true
      become_method: sudo
      user:
        name: "{{ account_name }}"
        group: "{{ group_name }}"

    - name: Add Install As User to Waterspout Group (will create a vagrant user if it doesn't exist)
      become: true
      become_method: sudo
      user:
        append: yes
        name: "{{ install_as_user }}"
        groups: ["{{ group_name }}",]

    #- name: Recursively remove application directory if it exists
    #  become: true
    #  become_method: sudo
    #  file:
    #    path: "{{ install_path }}"
    #    state: absent

    - name: Create application directory and set permissions
      become: true
      become_method: sudo
      file:
        path: "{{ install_path }}"
        state: directory
        owner: "{{ account_name }}"
        group: "{{ group_name }}"
        mode: '2775'  # read/write/execute for user and group + leading 2 for set GID bit to enable ACL in next step
        recurse: yes

    # we don't update afterward because we still need to add the key before we can
#    - name: Add Ubuntu GIS PPA so we can get GDAL in next step
#      become: true
#      become_method: sudo
#      apt_repository:
#        repo: ppa:ubuntugis/ppa
#        update_cache: no

#    - name: Add Ubuntu GIS PPA Key
#      become: true
#      become_method: sudo
#      apt_key:
#        id: 314DF160

      # install some basic packages we'll want for this project
    - name: Install system apt packages
      become: true
      become_method: sudo
      apt:
        update_cache: yes
        name: ['acl', 'git','nginx-full','{{ python_executable }}','{{ python_executable }}-dev','python3-pip','virtualenv','postgresql' ,'gdal-bin','libgdal-dev']
        state: present
      # not sure if the python-pip here will install it for python 3.8 - I'm not sure it will based on experience
      # we may need to adjust how we get pip

    - name: Get installed GDAL version so we can install corresponding version in Python
      command: "gdalinfo --version"
      register: gdal_version_text

    - name: Installed GDAL Version Full Text
      debug:
        msg: "GDAL Version Detected: {{ gdal_version_text.stdout }}"

    # parse the gdal version reported to get the numeric representation for Python
    - name: Parse GDAL Version
      set_fact:
        gdal_version: "{{ gdal_version_text.stdout | regex_search('GDAL\\s(.*?),.*', '\\1') }}"

    - name: Installed GDAL Version
      debug:
        msg: "GDAL Version Detected: {{ gdal_version[0] }}"

    - name: Set group ACL for default permissions
      become: true
      become_method: sudo
      acl:
        default: yes
        path: "{{ install_path }}"
        etype: group
        permissions: rwx
        state: present

    - name: Set User ACL for default permissions
      become: true
      become_method: sudo
      acl:
        default: yes
        path: "{{ install_path }}"
        etype: user
        permissions: rwx
        state: present

    # need to verify that it's not going to make a folder /srv/Waterspout/Waterspout with this
    - name: Clone Waterspout to machine
      git:
        clone: yes
        force: yes  # if we run this after we've run the update script, then we'll have modified manage.py and need to force it to discard changes
        repo: https://github.com/Water-Systems-Management-UCM/Waterspout
        dest: "{{ back_end_application_folder }}"

    - name: Clone Stormchaser to machine
      git:
        clone: yes
        force: yes  # we'll need to discard modified manage.py because we need to modify it to run it here
        repo: https://github.com/Water-Systems-Management-UCM/Waterspout
        dest: "{{ back_end_application_folder }}"

    - name: Make virtualenv and install Python GDAL before rest of requirements (so it's present and matches correct version)
      pip:
        virtualenv: "{{ virtualenv_folder }}"
        virtualenv_python: "{{ python_executable }}"
        virtualenv_site_packages: no
        name: "GDAL"
        version: "{{ gdal_version[0] }}"

    - name: Make Logs folder
      file: path="{{ logs_folder }}" state=directory

    - name: Copy the Nginx config file to the machine
      copy:
        src: nginx.cfg
        dest: /etc/nginx/sites-available/static_site.cfg
      become: yes

    - name: create symlink
      file:
        src: /etc/nginx/sites-available/static_site.cfg
        dest: /etc/nginx/sites-enabled/default
        state: link
      become: yes

    - name: Set Application Root in Nginx
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/nginx/sites-available/static_site.cfg
        regexp: 'root REPLACE_ROOT_FOLDER;'
        line: "root {{ front_end_application_folder }}/dist;"

    - name: Set Access Log in Nginx
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/nginx/sites-available/static_site.cfg
        regexp: 'access_log REPLACE_LOG_FOLDER/nginx_access_log;'
        line: "access_log {{ logs_folder }}/nginx_access_log;"

    - name: Set Error Log for Nginx
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/nginx/sites-available/static_site.cfg
        regexp: 'error_log REPLACE_LOG_FOLDER/nginx_error_log;'
        line: "error_log {{ logs_folder }}/nginx_error_log;"

    - name: Restart nginx
      become: true
      become_method: sudo
      service:
        name: nginx
        state: restarted

    - name: Copy Service setup file for main waterspout service
      become: true
      become_method: sudo
      copy:
        src: waterspout.service
        dest: /etc/systemd/system
        owner: root
        group: root
        mode: 0644

    - name: Set Service Description
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/systemd/system/waterspout.service
        regexp: '^Description'
        line: "Description=Waterspout Back End"

    - name: Set Service User
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/systemd/system/waterspout.service
        regexp: '^User'
        line: "User={{ account_name }}"

    - name: Set Service Executable
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/systemd/system/waterspout.service
        regexp: '^ExecStart'
        line: "ExecStart={{ virtualenv_python_executable }} {{ back_end_application_folder }}/waitress_serve.py"

    - name: Reload service waterspout, in all cases
      become: true
      become_method: sudo
      service:
        name: waterspout
        state: restarted

    - name: Copy Service setup file for Waterspout Run Processor
      become: true
      become_method: sudo
      copy:
        src: waterspout.service
        dest: /etc/systemd/system/waterspoutmodels.service
        owner: root
        group: root
        mode: 0644

    - name: Set Service Description
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/systemd/system/waterspoutmodels.service
        regexp: '^Description'
        line: "Description=Waterspout Model Run Processor"

    - name: Set Service User
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/systemd/system/waterspoutmodels.service
        regexp: '^User'
        line: "User={{ account_name }}"

    - name: Set Service Executable
      become: true
      become_method: sudo
      lineinfile:
        path: /etc/systemd/system/waterspoutmodels.service
        regexp: '^ExecStart'
        line: "ExecStart={{ virtualenv_python_executable }} {{ back_end_application_folder }}/manage.py process_runs"

    - name: Reload service waterspoutmodels, in all cases
      become: true
      become_method: sudo
      service:
        name: waterspoutmodels
        state: restarted

    - name: Load starting data into application
      command: "{{ virtualenv_python_executable }} {{ back_end_application_folder }}/manage.py load_data {{ region_to_load }}"


# now we're done with the standard setup, run the code that runs both the first time and for every update
- import_playbook: ansible-install-dapper.yml
- import_playbook: ansible-update-waterspout.yml
- import_playbook: ansible-update-stormchaser.yml

    #     Can we generate and configure postgres user accounts and store them in variables
    #     to plug into local settings files? Do I need a separate script that dumps local_settings files?
    #     or can I do a replacement of a template string with ansible?
    # TODO: Create user account for application to run as
    # TODO: Set permissions on application srv directory
    # TODO: Configure service for application
    # TODO: Process static files
    # TODO: Fail2ban and other services
    # TODO: Move SSH port?
    # TODO: Check groundwater site setup instructions for other things that go here
    # TODO: Make application update playbook